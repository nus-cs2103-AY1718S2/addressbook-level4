package seedu.address.ui.testutil;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.fail;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

import guitests.guihandles.JobCardHandle;
import guitests.guihandles.JobListPanelHandle;
import guitests.guihandles.PersonCardHandle;
import guitests.guihandles.PersonListPanelHandle;
import guitests.guihandles.ResultDisplayHandle;
import seedu.address.model.job.Job;
import seedu.address.model.person.Person;
import seedu.address.ui.JobCard;
import seedu.address.ui.PersonCard;
/**
 * A set of assertion methods useful for writing GUI tests.
 */
public class GuiTestAssert {
    private static final String LABEL_DEFAULT_STYLE = "label";

    /**
     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}.
     */
    public static void assertCardEquals(PersonCardHandle expectedCard, PersonCardHandle actualCard) {
        assertEquals(expectedCard.getId(), actualCard.getId());
        assertEquals(expectedCard.getCurrentPosition(), actualCard.getCurrentPosition());
        assertEquals(expectedCard.getCompany(), actualCard.getCompany());
        assertEquals(expectedCard.getName(), actualCard.getName());
        assertEquals(expectedCard.getSkills(), actualCard.getSkills());
        //@@author KevinCJH
        expectedCard.getSkills().forEach(tag ->
            assertEquals(expectedCard.getSkillStyleClasses(tag), actualCard.getSkillStyleClasses(tag)));
        //@@author
    }

    /**
     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}.
     */
    public static void assertCardEquals(JobCardHandle expectedCard, JobCardHandle actualCard) {
        assertEquals(expectedCard.getId(), actualCard.getId());
        assertEquals(expectedCard.getPosition(), actualCard.getPosition());
        assertEquals(expectedCard.getTeam(), actualCard.getTeam());
        assertEquals(expectedCard.getLocation(), actualCard.getLocation());
        assertEquals(expectedCard.getNumberOfPositions(), actualCard.getNumberOfPositions());
        assertEquals(expectedCard.getSkills(), actualCard.getSkills());

        expectedCard.getSkills().forEach(tag ->
                assertEquals(expectedCard.getSkillStyleClasses(tag), actualCard.getSkillStyleClasses(tag)));
    }


    /**
     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}.
     */
    public static void assertCardDisplaysPerson(Person expectedPerson, PersonCardHandle actualCard) {
        assertEquals(expectedPerson.getName().fullName, actualCard.getName());
        assertEquals(expectedPerson.getCurrentPosition().value, actualCard.getCurrentPosition());
        assertEquals(expectedPerson.getCompany().value, actualCard.getCompany());
        assertTagsEquals(expectedPerson, actualCard);
    }

    /**
     * Asserts that {@code actualCard} displays the details of {@code expectedPerson}.
     */
    public static void assertCardDisplaysJob(Job expectedJob, JobCardHandle actualCard) {
        assertEquals(expectedJob.getPosition().value, actualCard.getPosition());
        assertEquals(expectedJob.getTeam().value, actualCard.getTeam());
        assertEquals(expectedJob.getLocation().value, actualCard.getLocation());
        assertEquals("Positions: " + expectedJob.getNumberOfPositions().value, actualCard.getNumberOfPositions());

        assertTagsEquals(expectedJob, actualCard);
    }

    /**
     * Returns the color style for {@code skillName}'s label. The skill's color is determined by looking up the color
     * in {@code PersonCard#TAG_COLOR_STYLES}, {@code JobCard#TAG_COLOR_STYLES} using an index generated by
     * the hash code of the skill's content.
     *
     * @see PersonCard#getTagColorStyleFor(String)
     * @see JobCard#getTagColorStyleFor(String)
     */
    private static String getTagColorStyleFor(String tagName) {
        switch (tagName) {
        case "classmates":
            return "brown";

        case "owesMoney":
            return "green";

        case "colleagues":
            return "purple";

        case "Python":
            return "grey";

        case "neighbours":
            return "yellow";

        case "Designing":
            return "blue";

        case "family":
            return "lightgreen";

        case "friend":
            return "grey";

        case "friends":
            return "pink";

        case "husband":
            return "red";

        case "C++":
            return "brown";

        case "Java":
            return "grey";

        case "Algorithms":
            return "grey";

        case "Excel":
            return "yellow";

        case "Writing":
            return "brown";

        case "AWS":
            return "orange";

        case "SQL-Server":
            return "purple";

        case "UI/UX":
            return "green";

        case "Testing":
            return "grey";

        default:
            fail(tagName + " does not have a color assigned.");
            return "";
        }
    }

    /**
     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct
     * color.
     */
    private static void assertTagsEquals(Person expectedPerson, PersonCardHandle actualCard) {
        List<String> expectedTags = expectedPerson.getSkills().stream()
                .map(tag -> tag.skillName).collect(Collectors.toList());
        assertEquals(expectedTags, actualCard.getSkills());
        expectedTags.forEach(tag -> assertEquals(
                Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)), actualCard.getSkillStyleClasses(tag)));
    }

    /**
     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPerson} with the correct
     * color.
     */
    private static void assertTagsEquals(Job expectedJob, JobCardHandle actualCard) {
        List<String> expectedTags = expectedJob.getSkills().stream()
                .map(tag -> tag.skillName).collect(Collectors.toList());
        assertEquals(expectedTags, actualCard.getSkills());
        expectedTags.forEach(tag -> assertEquals(
                Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)), actualCard.getSkillStyleClasses(tag)));
    }
    //@@author

    /**
     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and
     * in the correct order.
     */
    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, Person... persons) {
        for (int i = 0; i < persons.length; i++) {
            assertCardDisplaysPerson(persons[i], personListPanelHandle.getPersonCardHandle(i));
        }
    }

    /**
     * Asserts that the list in {@code jobListPanelHandle} displays the details of {@code jobs} correctly and
     * in the correct order.
     */
    public static void assertListMatching(JobListPanelHandle jobListPanelHandle, Job... jobs) {
        for (int i = 0; i < jobs.length; i++) {
            assertCardDisplaysJob(jobs[i], jobListPanelHandle.getJobCardHandle(i));
        }
    }

    /**
     * Asserts that the list in {@code personListPanelHandle} displays the details of {@code persons} correctly and
     * in the correct order.
     */
    public static void assertListMatching(PersonListPanelHandle personListPanelHandle, List<Person> persons) {
        assertListMatching(personListPanelHandle, persons.toArray(new Person[0]));
    }

    /**
     * Asserts that the list in {@code jobListPanelHandle} displays the details of {@code jobs} correctly and
     * in the correct order.
     */
    public static void assertListMatching(JobListPanelHandle jobListPanelHandle, List<Job> jobs) {
        assertListMatching(jobListPanelHandle, jobs.toArray(new Job[0]));
    }

    /**
     * Asserts the size of the list in {@code personListPanelHandle} equals to {@code size}.
     */
    public static void assertListSize(PersonListPanelHandle personListPanelHandle, int size) {
        int numberOfPeople = personListPanelHandle.getListSize();
        assertEquals(size, numberOfPeople);
    }

    /**
     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}.
     */
    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {
        assertEquals(expected, resultDisplayHandle.getText());
    }
}
