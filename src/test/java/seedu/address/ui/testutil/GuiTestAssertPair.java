package seedu.address.ui.testutil;

import static org.junit.Assert.assertEquals;
import static seedu.address.ui.PairCard.TAG_COLOR_STYLES;

import java.util.List;
import java.util.stream.Collectors;

import guitests.guihandles.PairCardHandle;
import guitests.guihandles.PairListPanelHandle;
import guitests.guihandles.ResultDisplayHandle;
import seedu.address.model.pair.Pair;
import seedu.address.ui.PairCard;

/**
 * A set of assertion methods useful for writing GUI tests.
 */
public class GuiTestAssertPair {
    private static final String LABEL_DEFAULT_STYLE = "label";

    /**
     * Asserts that {@code actualCard} displays the same values as {@code expectedCard}.
     */
    public static void assertCardEquals(PairCardHandle expectedCard, PairCardHandle actualCard) {
        assertEquals(expectedCard.getId(), actualCard.getId());
        assertEquals(expectedCard.getName(), actualCard.getName());
        assertEquals(expectedCard.getTags(), actualCard.getTags());

        expectedCard.getTags().forEach(tag ->
                assertEquals(expectedCard.getTagStyleClasses(tag), actualCard.getTagStyleClasses(tag)));
    }

    /**
     * Asserts that {@code actualCard} displays the details of {@code expectedPair}.
     */
    public static void assertCardDisplaysPair(Pair expectedPair, PairCardHandle actualCard) {
        assertEquals(expectedPair.getPairName(), actualCard.getName());

        assertTagsEqual(expectedPair, actualCard);
    }

    /**
     * Returns the color style for {@code tagName}'s label. The tag's color is determined by looking up the color
     * in {@code PairCard#TAG_COLOR_STYLES}, using an index generated by the has code of the tag's content.
     *
     * @see PairCard#getTagColorStyleFor(String)
     */
    private static String getTagColorStyleFor(String tagName) {
        return TAG_COLOR_STYLES[Math.abs(tagName.hashCode()) % TAG_COLOR_STYLES.length];
    }

    /**
     * Asserts that the tags in {@code actualCard} matches all the tags in {@code expectedPair} with the correct
     * color.
     */
    private static void assertTagsEqual(Pair expectedPair, PairCardHandle actualCard) {
        List<String> expectedTags = expectedPair.getTags().stream()
                .map(tag -> tag.tagName).collect(Collectors.toList());
        assertEquals(expectedTags, actualCard.getTags());
        /*expectedTags.forEach(tag ->
            assertEquals(Arrays.asList(LABEL_DEFAULT_STYLE, getTagColorStyleFor(tag)),
                    actualCard.getTagStyleClasses(tag)));*/
    }

    /**
     * Asserts that the list in {@code pairListPanelHandle} displays the details of {@code pairs} correctly and
     * in the correct order.
     */
    public static void assertListMatching(PairListPanelHandle pairListPanelHandle, Pair... pairs) {
        for (int i = 0; i < pairs.length; i++) {
            assertCardDisplaysPair(pairs[i], pairListPanelHandle.getPairCardHandle(i));
        }
    }

    /**
     * Asserts that the list in {@code pairListPanelHandle} displays the details of {@code pairs} correctly and
     * in the correct order.
     */
    public static void assertListMatching(PairListPanelHandle pairListPanelHandle, List<Pair> pairs) {
        assertListMatching(pairListPanelHandle, pairs.toArray(new Pair[0]));
    }

    /**
     * Asserts the size of the list in {@code pairListPanelHandle} equals to {@code size}.
     */
    public static void assertListSize(PairListPanelHandle pairListPanelHandle, int size) {
        int numberOfPeople = pairListPanelHandle.getListSize();
        assertEquals(size, numberOfPeople);
    }

    /**
     * Asserts the message shown in {@code resultDisplayHandle} equals to {@code expected}.
     */
    public static void assertResultMessage(ResultDisplayHandle resultDisplayHandle, String expected) {
        assertEquals(expected, resultDisplayHandle.getText());
    }
}
